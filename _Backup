#!/bin/bash

# =====================[ CONFIGURA칂칏ES INICIAIS ]====================

DATA=$(date +'%Y-%m-%d %H:%M')
DIA=$(date +'%Y%m%d')
HOST=$(hostname -a)

# Diret칩rio de destino dos backups
BACKUP_DIR="/Backup"

# Caminhos a serem inclu칤dos no backup (ser칚o filtrados abaixo)
SOURCE="/Scripts /etc /root /usr/local /opt/zimbra/backup /opt/zimbra/conf"

# Senha do ZIP
ZIP_PASS='q|?a)N2#8d^JS^lm2EF29g*D$l#}aIu('

# Arquivos de sa칤da
DEST_TAR="${BACKUP_DIR}/${HOST}-backup${DIA}.tar"
DEST_ZIP="${BACKUP_DIR}/${HOST}-backup${DIA}.zip"

# Script de envio remoto (LFTP)
UPLOAD_SCRIPT="/Scripts/_Upload_LFTP"

# E-mail para alertas de erro
EMAIL_TO="thiago@hostlp.net"

# Quantidade de backups locais a manter
DIAS_RETER=7

# Log do processo
LOG="/var/log/backup_${HOST}.log"

# Status de execu칞칚o
STATUS="OK"

# Redireciona tudo para log e tela
exec > >(tee -a "$LOG") 2>&1

# =====================[ FUN칂칏ES DE APOIO ]====================

erro() {
    echo "[ERRO] $1"
    STATUS="ERRO"
}

verificar_prerequisitos() {
    echo "[$(date +'%d.%m.%Y %H:%M')] Verificando pr칠-requisitos..."

    # Verifica e instala mailx
#    if ! command -v mailx >/dev/null 2>&1; then
#        echo " - mailx n칚o encontrado. Instalando..."
#        apt update && apt install -y mailutils || erro "Falha ao instalar mailx"
#    fi

    # Verifica e cria diret칩rio de backup
    if [ ! -d "$BACKUP_DIR" ]; then
        echo " - Diret칩rio $BACKUP_DIR n칚o existe. Criando..."
        mkdir -p "$BACKUP_DIR" || erro "Falha ao criar $BACKUP_DIR"
    fi
}

delete_old_backups() {
    echo "[$(date +'%d.%m.%Y %H:%M')] Mantendo apenas os 칰ltimos $DIAS_RETER backups..."
    find "$BACKUP_DIR" -maxdepth 1 -type f -name "${HOST}-backup*.zip" | \
        sort -r | \
        tail -n +$(($DIAS_RETER + 1)) | \
        while read file; do
            echo "Removendo backup antigo: $file"
            rm -f "$file" || erro "Falha ao remover $file"
        done
}

# =====================[ PROCESSO DE BACKUP ]====================

echo "[$DATA] Iniciando backup em ${HOST}"
echo "---------------------------------------------"

# Etapa 0: Verifica칞칚o de pr칠-requisitos
verificar_prerequisitos

# Etapa 1: Exportar configura칞칚o (se aplic치vel)
echo "[`date +'%d.%m.%Y %H:%M'`] Exportando configura칞칚o atual [1/4] ..."
# pmgbackup backup  # Descomente se estiver usando Proxmox Mail Gateway

# Etapa 2: Limpeza de backups antigos
echo "[`date +'%d.%m.%Y %H:%M'`] Excluindo backups antigos [2/4] ..."
delete_old_backups

# Etapa 3: Compacta칞칚o
echo "[`date +'%d.%m.%Y %H:%M'`] Compactando dados em TAR e ZIP [3/4] ..."

# Gerar lista com apenas os diret칩rios existentes
VALID_SOURCE=""
for dir in $SOURCE; do
    if [ -d "$dir" ]; then
        VALID_SOURCE+="$dir "
    else
        echo "[AVISO] Diret칩rio n칚o encontrado e ser치 ignorado: $dir"
    fi
done

# Verifica se h치 ao menos 1 diret칩rio v치lido
if [ -z "$VALID_SOURCE" ]; then
    erro "Nenhum diret칩rio v치lido encontrado para backup"
else
    tar -Pcf "$DEST_TAR" $VALID_SOURCE || erro "Erro ao gerar TAR"
    zip -P "$ZIP_PASS" -r "$DEST_ZIP" "$DEST_TAR" || erro "Erro ao gerar ZIP"
    rm -f "$DEST_TAR"
fi

# Etapa 4: Envio remoto
echo "[`date +'%d.%m.%Y %H:%M'`] Enviando backup via LFTP [4/4] ..."
bash "$UPLOAD_SCRIPT" || erro "Erro ao executar script de envio remoto"

# Finaliza칞칚o
echo "[`date +'%d.%m.%Y %H:%M'`] Backup finalizado com STATUS: $STATUS"
echo "---------------------------------------------"

# =====================[ ENVIO DE E-MAIL EM CASO DE ERRO ]====================

if [ "$STATUS" != "OK" ]; then
    echo "[`date +'%d.%m.%Y %H:%M'`] Enviando e-mail de falha para $EMAIL_TO ..."
	/usr/bin/mail -r root -s "游뚿 ERRO no Backup ${HOST} em ${DIA}" "$EMAIL_TO" < "$LOG"
fi
