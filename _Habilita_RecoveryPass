#!/bin/bash

# Script para configuração Zimbra com:
# - Ordem alfabética de processamento
# - Baixo consumo de CPU
# - Controle de paralelismo

## Configurações
DEFAULT_EMAIL="admin@localhost.com.br"
LOG_FILE="/var/log/zimbra_alpha_config_$(date +%Y%m%d-%H%M%S).log"
BATCH_SIZE=200
PARALLEL_DOMAINS=3
CPU_LIMIT=50
NICENESS=10

## Verificações iniciais
if [ "$(id -u)" -ne 0 ] && [ "$(whoami)" != "zimbra" ]; then
   echo "ERRO: Execute como root ou usuário zimbra" >&2
   exit 1
fi

## Configuração de prioridade
renice $NICENESS $$ >/dev/null
if command -v cpulimit &>/dev/null; then
   cpulimit -l $CPU_LIMIT -p $$ -b >/dev/null 2>&1
fi

## Solicitar e-mail de recuperação
read -p "Digite o e-mail de recuperação padrão [${DEFAULT_EMAIL}]: " RECOVERY_EMAIL
RECOVERY_EMAIL=${RECOVERY_EMAIL:-$DEFAULT_EMAIL}

if [[ ! "$RECOVERY_EMAIL" =~ ^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$ ]]; then
   echo "ERRO: Formato de e-mail inválido!" >&2
   exit 1
fi

ZMPROV_CMD="/opt/zimbra/bin/zmprov"

## Função para configurar COS em ordem alfabética
configure_cos() {
    echo "[$(date +%H:%M:%S)] Configurando COS (ordem alfabética)" | tee -a "$LOG_FILE"
    
    $ZMPROV_CMD gac | sort | while read cos; do
        echo "Configurando COS: $cos" | tee -a "$LOG_FILE"
        $ZMPROV_CMD mc "$cos" zimbraFeatureResetPasswordStatus enabled
        sleep 0.1
    done
    
    echo "[$(date +%H:%M:%S)] Configuração de COS concluída" | tee -a "$LOG_FILE"
}

## Função para processar usuários em ordem alfabética
process_users() {
    local dominio=$1
    local count=0
    local batch_cmds=""
    
    echo "[$(date +%H:%M:%S)] Processando domínio: $dominio" | tee -a "$LOG_FILE"
    
    # Obter usuários em ordem alfabética
    $ZMPROV_CMD -l gaa "$dominio" | sort | while read usuario; do
        batch_cmds+="ma $usuario zimbraFeatureResetPasswordStatus enabled "
        batch_cmds+="zimbraPrefPasswordRecoveryAddress $RECOVERY_EMAIL "
        batch_cmds+="zimbraPrefPasswordRecoveryAddressStatus verified\n"
        
        ((count++))
        
        if [ $((count % BATCH_SIZE)) -eq 0 ]; then
            echo -e "$batch_cmds" | $ZMPROV_CMD >/dev/null 2>&1
            batch_cmds=""
            sleep 0.05
        fi
    done
    
    # Processar remanescentes
    if [ -n "$batch_cmds" ]; then
        echo -e "$batch_cmds" | $ZMPROV_CMD >/dev/null 2>&1
    fi
    
    echo "[$(date +%H:%M:%S)] $dominio concluído: $count usuários" | tee -a "$LOG_FILE"
}

## Execução principal
{
echo "==== INÍCIO DA EXECUÇÃO (ORDEM ALFABÉTICA) ===="
date
echo "E-mail de recuperação: $RECOVERY_EMAIL"
echo "Configuração:"
echo " - Ordem alfabética para COS, domínios e usuários"
echo " - Paralelismo: $PARALLEL_DOMAINS domínios"
echo " - Tamanho de lote: $BATCH_SIZE usuários"
echo "----------------------------------------"

# 1. Configurar COS em ordem alfabética
configure_cos

# 2. Obter e ordenar domínios alfabeticamente
echo "[$(date +%H:%M:%S)] Obtendo lista de domínios..." | tee -a "$LOG_FILE"
DOMINIOS=$($ZMPROV_CMD gad | sort)
TOTAL_DOMINIOS=$(wc -l <<< "$DOMINIOS")
COUNT=0

echo "----------------------------------------"
echo "[$(date +%H:%M:%S)] Iniciando processamento de $TOTAL_DOMINIOS domínios" | tee -a "$LOG_FILE"

# 3. Processar domínios em ordem alfabética
for dominio in $DOMINIOS; do
    ((COUNT++))
    echo "[$(date +%H:%M:%S)] Domínio $COUNT/$TOTAL_DOMINIOS: $dominio" | tee -a "$LOG_FILE"
    
    # Configurar domínio
    $ZMPROV_CMD md "$dominio" zimbraFeatureResetPasswordStatus enabled
    
    # Processar usuários com controle de paralelismo
    process_users "$dominio" &
    
    # Controlar paralelismo
    RUNNING=$(jobs -rp | wc -l)
    while [ $RUNNING -ge $PARALLEL_DOMAINS ]; do
        sleep 2
        RUNNING=$(jobs -rp | wc -l)
    done
done

wait

echo "==== EXECUÇÃO CONCLUÍDA ===="
date
echo "Resumo:"
echo " - Domínios processados: $TOTAL_DOMINIOS"
echo " - Tempo total: $SECONDS segundos"
} | tee -a "$LOG_FILE"

echo "Log completo disponível em: $LOG_FILE"
