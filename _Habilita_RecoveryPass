#!/bin/bash

# Script corrigido para configuração Zimbra
# Versão: 4.2 - Correção de processamento de usuários

## Configurações
DEFAULT_EMAIL="admin@localhost.com.br"
LOG_FILE="/var/log/zimbra_fixed_config_$(date +%Y%m%d-%H%M%S).log"
BATCH_SIZE=200
PARALLEL_DOMAINS=3

## Verificações iniciais
if [ "$(id -u)" -ne 0 ] && [ "$(whoami)" != "zimbra" ]; then
   echo "ERRO: Execute como root ou usuário zimbra" >&2
   exit 1
fi

## Solicitar e-mail de recuperação
read -p "Digite o e-mail de recuperação padrão [${DEFAULT_EMAIL}]: " RECOVERY_EMAIL
RECOVERY_EMAIL=${RECOVERY_EMAIL:-$DEFAULT_EMAIL}

if [[ ! "$RECOVERY_EMAIL" =~ ^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$ ]]; then
   echo "ERRO: Formato de e-mail inválido!" >&2
   exit 1
fi

ZMPROV_CMD="/opt/zimbra/bin/zmprov"

## Função para configurar COS
configure_cos() {
    echo "[$(date +%H:%M:%S)] Configurando COS" | tee -a "$LOG_FILE"
    
    $ZMPROV_CMD gac | sort | while read cos; do
        echo "Configurando COS: $cos" | tee -a "$LOG_FILE"
        $ZMPROV_CMD mc "$cos" zimbraFeatureResetPasswordStatus enabled
    done
    
    echo "[$(date +%H:%M:%S)] Configuração de COS concluída" | tee -a "$LOG_FILE"
}

## Função corrigida para processar usuários
process_domain() {
    local dominio=$1
    local count=0
    
    echo "[$(date +%H:%M:%S)] Processando domínio: $dominio" | tee -a "$LOG_FILE"
    
    # Primeiro habilita no domínio
    $ZMPROV_CMD md "$dominio" zimbraFeatureResetPasswordStatus enabled
    
    # Obter lista de usuários
    USUARIOS=$($ZMPROV_CMD -l gaa "$dominio" | sort)
    
    # Processar cada usuário individualmente (mais confiável)
    for usuario in $USUARIOS; do
        $ZMPROV_CMD ma "$usuario" zimbraFeatureResetPasswordStatus enabled \
            zimbraPrefPasswordRecoveryAddress "$RECOVERY_EMAIL" \
            zimbraPrefPasswordRecoveryAddressStatus verified >/dev/null 2>&1
        
        ((count++))
        if [ $((count % 100)) -eq 0 ]; then
            echo "[$(date +%H:%M:%S)] $count usuários processados em $dominio" | tee -a "$LOG_FILE"
        fi
    done
    
    echo "[$(date +%H:%M:%S)] $dominio concluído: $count usuários" | tee -a "$LOG_FILE"
}

## Execução principal
{
echo "==== INÍCIO DA EXECUÇÃO ===="
date
echo "E-mail de recuperação: $RECOVERY_EMAIL"
echo "----------------------------------------"

# 1. Configurar COS
configure_cos

# 2. Obter domínios em ordem alfabética
DOMINIOS=$($ZMPROV_CMD gad | sort)
TOTAL_DOMINIOS=$(wc -l <<< "$DOMINIOS")
COUNT=0

echo "[$(date +%H:%M:%S)] Iniciando processamento de $TOTAL_DOMINIOS domínios" | tee -a "$LOG_FILE"

# 3. Processar domínios com paralelismo controlado
for dominio in $DOMINIOS; do
    ((COUNT++))
    echo "[$(date +%H:%M:%S)] Domínio $COUNT/$TOTAL_DOMINIOS: $dominio" | tee -a "$LOG_FILE"
    
    process_domain "$dominio" &
    
    # Controlar paralelismo
    while [ $(jobs -rp | wc -l) -ge $PARALLEL_DOMAINS ]; do
        sleep 2
    done
done

wait

echo "==== EXECUÇÃO CONCLUÍDA ===="
date
echo "Resumo:"
echo " - Domínios processados: $TOTAL_DOMINIOS"
} | tee -a "$LOG_FILE"

echo "Log completo disponível em: $LOG_FILE"
